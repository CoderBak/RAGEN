defaults:
  - ppo_trainer # this is a symbolic link to the verl/verl/trainer/config/ppo_trainer.yaml file
  - envs

system:
  CUDA_VISIBLE_DEVICES: "0"

micro_batch_size_per_gpu: 1
ppo_mini_batch_size: 1

actor_rollout_ref:
  model:
    path: Qwen/Qwen2.5-0.5B-Instruct
  actor:
    ppo_mini_batch_size: null  # by default, ppo_mini_batch_size = train_batch_size / 4
    micro_batch_size_per_gpu: null # following micro_batch_size_per_gpu
    ppo_micro_batch_size_per_gpu: null # following micro_batch_size_per_gpu
    use_kl_loss: True
    use_ref: True
    kl_loss_coef: 0.000
    kl_loss_type: low_var_kl
    optim:
      betas: [0.9, 0.999]
  ref:
    log_prob_micro_batch_size_per_gpu: null # following micro_batch_size_per_gpu
  rollout:
    log_prob_micro_batch_size_per_gpu: null # following micro_batch_size_per_gpu
    tensor_model_parallel_size: 1
    max_model_len: 2048
    prompt_length: 1 # useless. Just put it here
    response_length: 400 # single-turn response length
    gpu_memory_utilization: 0.5
    # max_num_batched_tokens: 8192 # set only when enable_chunked_prefill is true
    temperature: 1
    val_kwargs:
      do_sample: True
      temperature: 0.5

algorithm:
  adv_estimator: grpo

critic:
  ppo_mini_batch_size: null # by default, ppo_mini_batch_size = train_batch_size / 4
  ppo_micro_batch_size_per_gpu: null # following micro_batch_size_per_gpu
  model:
    path: ${actor_rollout_ref.model.path}
  optim:
    betas: [0.9, 0.999]

data:
  max_prompt_length: null
  max_response_length: null
  train_batch_size: null

trainer:
  project_name: ragen_new
  experiment_name: test
  total_training_steps: 200
  validation_steps: 2 # validation instances = validation_steps * val_env_groups * group_size
  val_before_train: True
  n_gpus_per_node: 1
  test_freq: 10
  val_generations_to_log_to_wandb: 20
  logger: [ 'console', 'wandb' ]

agent_proxy:
  max_turn: 5
  action_sep: "||"
  max_actions_per_turn: 5 # how many actions can be output at most in a single turn
  use_turn_scores: False # important to GAE when applying token-level rewards to token-level advantages. If False, will take the sum of scores as the reward for the last turn.
  enable_think: True # False -> no think RL
  reward_normalization:
    grouping: "inductive" # env / batch / prompt
    method: "asym_clip"

es_manager:
  format_penalty: -0.1
  train:
    env_groups: 1
    # under the same group, the env config and env seed are ensured to be equal
    group_size: 1
    env_configs:
      tags: ["WebShop"]
      n_groups: [1] # If not set, all env names divide nums equally. Under the same group, the env config and env seed (prompt) are equal in each generation
  val:
    env_groups: 1
    group_size: 1 # should be set to 1 because val temperature is set to 0 and same prompt leads to same output
    env_configs:
      tags: ["WebShop"]
      n_groups: [1] # [128] # If not set, all env names divide nums equally. Under the same group, the env config and env seed (prompt) are equal in each generation

ctx_manager:
  generation: # go to vllm
    gen_config:
      response_length: ${actor_rollout_ref.rollout.response_length}
      temperature: ${actor_rollout_ref.rollout.temperature}
      top_p: ${actor_rollout_ref.rollout.top_p}
      top_k: ${actor_rollout_ref.rollout.top_k}
      kwargs: null
